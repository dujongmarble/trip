<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dj.trip.domain.review.mapper.ReviewMapper">

    <insert id="insertReview" parameterType="Review">
        insert into review(attraction_info_id, member_id, title, content, image_url)
        values (#{attractionInfoId}, #{memberId}, #{title}, #{content}, #{imageUrl})
    </insert>

    <select id="selectReviewId" parameterType="Review" resultType="int">
        select review_id
        from review
        where attraction_info_id = #{attractionInfoId}
          and member_id = #{memberId}
          and title = #{title}
          and content = #{content}
        order by review_id desc limit 1
    </select>

    <select id="selectReview" parameterType="Review" resultType="GetReviewResponse">
        select r.review_id,
               r.attraction_info_id,
               a.name                                                                            as attractionName,
               m.nickname,
               r.title,
               r.content,
               r.image_url                                                                       as reviewImageUrl,
               m.image_url                                                                       as profileImageUrl,
               r.hits,
               r.create_date,
               count(l.member_board_like_id)                                                     as likes,
               if(r.member_id = #{memberId}, true, false)                                        as isWriteByMe,
               if(r.review_id in (select review_id
                                  from member_board_like
                                  where member_board_like.member_id = #{memberId}), true, false) as isCheckLike
        from review r
                 join member m
                      on r.member_id = m.member_id
                 join attraction_info a
                      on r.attraction_info_id = a.attraction_info_id
                 left join member_board_like l
                           on r.review_id = l.review_id
        group by r.review_id
        having r.review_id = #{reviewId}
    </select>

    <sql id="search">
        <if test="word != null and word != ''">
            <if test="key == 'keyword'">
                and title like concat('%', #{word}, '%')
                or content like concat('%', #{word}, '%')
            </if>
            <if test="key == 'sido'">
                and ${key} = concat(#{word}, '%')
            </if>
        </if>
    </sql>

    <sql id="order">
        <if test="key == 'like'">
            order by likes desc
        </if>
        <if test="key != 'like'">
            order by r.review_id desc
        </if>
    </sql>

    <select id="selectReviews" parameterType="ReviewsDao" resultType="ReviewInfo">
        select r.review_id, m.nickname, r.title, r.image_url as reviewImageUrl,
        m.image_url as profileImageUrl, r.hits,
        count(l.member_board_like_id)as likes
        from review r
        join member m
        on r.member_id=m.member_id
        left join member_board_like l
        on r.review_id=l.review_id
        <where>
            <include refid="search"></include>
        </where>
        group by r.review_id
        <include refid="order"></include>
        limit #{start}, #{pageSize}
    </select>

    <select id="getTotalReviewsCount" parameterType="ReviewsDao" resultType="int">
        select count(review_id)
        from review
        <where>
            <include refid="search"></include>
        </where>
    </select>

    <update id="modifyReview" parameterType="Review">
        update review
        set attraction_info_id = #{attractionInfoId},
            member_id          = #{memberId},
            title              = #{title},
            content            = #{content},
            image_url          = #{imageUrl}
        where review_id = #{reviewId}
    </update>

    <delete id="deleteReview" parameterType="Review">
        delete
        from review
        where review_id = #{reviewId}
          and member_id = #{memberId}
    </delete>

    <update id="updateHit" parameterType="int">
        update review
        set hits = hits + 1
        where review_id = #{reviewId}
    </update>
</mapper>